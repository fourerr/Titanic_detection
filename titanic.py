# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yxFgOjVqYZ1D7TiiMHqI0aQz9LqlMfD1
"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn.metrics import plot_confusion_matrix
from sklearn import tree
from keras.models  import Sequential
from keras.layers import Input, Dense, Flatten, Dropout, BatchNormalization
from keras.optimizers import Adam, SGD, RMSprop
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, precision_recall_curve, roc_auc_score, roc_curve, accuracy_score
import graphviz
import matplotlib.pyplot as plt
import seaborn as sns
import csv
import pandas as pd
import io

from google.colab import files
uploaded = files.upload()

"""read the files"""

df= pd.read_csv(io.BytesIO(uploaded['train.csv']))
print(df.shape)

"""replace to numeric values"""

df.loc[df.Sex=="male",'Sex']=1
df.loc[df.Sex=='female','Sex']=0

df['Sex'][9]

"""preprocessing - delete na values"""

summery1=df.isnull().sum()
print(summery1)
df['Age']= df['Age'].fillna(df['Age'].mean())
summery2=df.isnull().sum()
print(summery2)

"""allocate to X and y values to order the table """

df.head

X=df.drop(columns=["Survived","Embarked","Cabin","Ticket","Name"])
y=df['Survived']

print(X)

print (y)

X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.33, random_state=42)
print(X_test.shape)

feature_names = list(X.columns)
feature_names

clf = DecisionTreeClassifier(random_state=0)
clf.criterion='entropy'
clf.fit(X_train,y_train)
clf.max_depth=3
clf

dot_data = tree.export_graphviz(clf,
                                out_file=None, 
                                feature_names=feature_names,
                      filled=True, rounded=True,  
                      special_characters=True)  
graph = graphviz.Source(dot_data)  

graph

from sklearn.tree import export_text
r = export_text(clf, feature_names=feature_names)
print(r)

y_predict = clf.predict(X_test)
print(y_predict)

print(accuracy_score(y_test,y_predict))
plot_confusion_matrix(clf, X_test, y_test) 
plt.show()

"""neural network """

model_1 = Sequential([
    Dense(12, input_shape=(7,), activation="relu"),
    Dense(1, activation="sigmoid")
])

model_1.summary()

normalizer = StandardScaler()
X_train_norm = normalizer.fit_transform(X_train)
X_test_norm = normalizer.transform(X_test)

model_1.compile(SGD(lr = .003, momentum=0.7), "binary_crossentropy", metrics=["accuracy"])
run_hist_1 = model_1.fit(X_train_norm, y_train, validation_data=(X_test_norm, y_test), epochs=150)